{"version":3,"sources":["index.js"],"names":["DEFAULT_COMPLEXITY","DEFAULT_BOARD_SIZE","Math","pow","STATUSES","GAME_OVER","GAME_WON","null","Square","props","buttonClasses","failSquare","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","onContextMenu","value","Slider","handleInput","event","target","_this","setState","handleSlider","_this$props","this","min","max","step","publicValue","type","onChange","React","Component","Board","cols","rows","size","sqrt","board","i","row","j","push","renderSquare","key","e","preventDefault","addFlag","_this2","handleClick","renderValue","status","squares","history","includes","flags","Game","_this3","Object","_home_ar0ne_Projects_react_minesweeper_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_ar0ne_Projects_react_minesweeper_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_ar0ne_Projects_react_minesweeper_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","containsAllElements","arr","every","v","state","complexity","delimiter","length","s","h","console","log","_this$state","initSquares","printDebug","_this$state2","slice","square","closesZeroes","openClosestZeroSquares","concat","isGameWon","isIndexValid","index","undefined","checkLeft","zeroes","has","add","checkTop","checkBottom","checkRight","Set","Array","from","notBombs","map","val","filter","x","excluded","arguments","fill","counter","floor","random","restartGame","_this4","_this$state3","gameStatus","handleAddFlag","changeSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5d0fcaa.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst BOMB = 'X';\nconst ZERO = 0;\nconst FLAG = '?';\nconst GAME_OVER = \"GAME_OVER\";\nconst GAME_WON = \"GAME_WON\";\nconst DEFAULT_COMPLEXITY = 3;\nconst DEFAULT_BOARD_SIZE = Math.pow(7, 2);\n\nconst STATUSES = {\n    GAME_OVER: 'Game over!',\n    GAME_WON: \"You win!\",\n    null: 'Good luck!',\n}\n\nfunction Square(props) {\n    let buttonClasses = \"square\";\n    if (props.failSquare) {\n        buttonClasses += \" fail\";\n    }\n\n    return (\n        <button \n            className={buttonClasses}\n            onClick={props.onClick}\n            onContextMenu={props.onClick}\n        >\n        {props.value}\n        </button> \n    );\n}\n\nclass Slider extends React.Component {\n    handleInput = event => {\n        const { value } = event.target;\n        this.setState({value});\n        this.props.handleSlider(value);\n    }\n\n    render() {\n        const { value, min, max, step, publicValue } = this.props;\n\n        return (\n            <div className=\"slidecontainer\">\n                <input \n                    type=\"range\"\n                    className=\"slider\"\n                    min={min} \n                    max={max}\n                    step={step}\n                    value={value} \n                    onChange={this.handleInput}\n                />\n                <span>{ publicValue }</span>\n            </div>\n        )\n    }\n}\n\n\nclass Board extends React.Component {\n    render() {\n        const { size } = this.props;\n\n        let cols, rows;\n        cols = rows = Math.sqrt(size);\n\n        let board = []\n        for (var i = 0; i < cols; i++) {\n            let row = []\n            for (var j = 0; j < rows; j++) {\n                row.push(this.renderSquare(i * cols + j))\n            }\n            board.push(<div className=\"board-row\" key={i}>{row}</div>)\n        }\n\n        return (\n            <div className=\"board\">{board}</div>\n        );\n    }\n\n    handleClick(i, e) {\n        e.preventDefault();\n        if (e.type === 'click') {\n            this.props.onClick(i);\n        } else if (e.type === 'contextmenu') {\n            this.props.addFlag(i);\n        }\n    }\n\n    renderSquare(i) {\n        return (\n            <Square \n                onClick={(event) => this.handleClick(i, event) }\n                value={this.renderValue(i)}\n                key={i}\n                failSquare={this.props.failSquare === i}\n            />\n        );\n    }\n\n    renderValue(i) {\n        if (this.props.status === GAME_OVER) {\n            return this.props.squares[i];\n        }\n        if (this.props.history.includes(i)) {\n            return this.props.squares[i];\n        }\n        if (this.props.flags.includes(i)) {\n            return FLAG;\n        }\n        return <span className=\"index\">{i}</span>;\n    }\n}\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: [],\n            history: [],\n            flags: [],\n            status: null,\n            size: DEFAULT_BOARD_SIZE,\n            failSquare: null,\n            complexity: DEFAULT_COMPLEXITY\n        };\n    }\n\n    // @TODO: for debug purposes only\n    printDebug(squares) {\n        let delimiter = Math.sqrt(squares.length);\n        let s = '';\n        for(var h = 0; h < squares.length; h++) {\n            if (h !== 0 && h % delimiter === 0) {\n                s += \"\\n\";\n            }\n            s += squares[h];\n        }\n        console.log(s);\n    }\n\n    handleClick(i) {\n        let { squares, size } = this.state;\n        if (!squares.length) {\n            let complexity = size * (this.state.complexity / 100);\n            if (size - complexity < 1) {\n                this.setState({complexity: DEFAULT_COMPLEXITY});\n                return;\n            }\n            squares = this.initSquares(i, size, complexity);\n            this.printDebug(squares);\n        }\n\n        let { status, failSquare } = this.state;\n\n        if (status === GAME_OVER || status === GAME_WON) {\n            return;\n        }\n\n        let history = this.state.history.slice();\n\n        if (history.includes(i)) {\n            return;\n        }\n\n        const square = squares[i];\n        if (square === ZERO) {\n            const closesZeroes = this.openClosestZeroSquares(i, squares, history);\n            console.log(closesZeroes);\n            history = history.concat(closesZeroes);\n        } else if (square === BOMB) {\n            status = GAME_OVER;\n            history = squares;\n            failSquare = i;\n        }\n\n        history = history.concat(i);\n        \n        if (this.isGameWon(squares, history)) {\n            status = GAME_WON;\n        }\n\n        this.setState({\n            squares: squares,\n            history: history,\n            status: status,\n            failSquare: failSquare\n        });\n    }\n\n    openClosestZeroSquares(i, squares, history) {\n        // pretty dirty solution ;(\n\n        var isIndexValid = function(index, squares) {\n            return index !== undefined &&\n                index >= 0 && \n                index < squares.length &&\n                squares[index] !== BOMB;\n        }\n\n        var checkLeft = function(index, zeroes) {\n            if (zeroes.has(index)) {\n                return zeroes;\n            }\n\n            if (isIndexValid(index, squares)) {\n                zeroes.add(index);\n            }\n\n            zeroes = checkTop(index - delimiter, zeroes);\n            zeroes = checkBottom(index + delimiter, zeroes);\n\n            if (index % delimiter === 0) { // left edge\n                return zeroes;\n            }\n            \n            return checkLeft(index - 1, zeroes);\n        }\n\n        var checkRight = function(index, zeroes) {\n            if (zeroes.has(index)) {\n                return zeroes;\n            }\n\n            if (isIndexValid(index, squares)) {\n                zeroes.add(index);\n            }\n            \n            zeroes = checkBottom(index + delimiter, zeroes);\n            zeroes = checkTop(index - delimiter, zeroes);\n\n            if ((index + 1) % delimiter === 0) { // right edge\n                return zeroes;\n            }\n\n            return checkRight(index + 1, zeroes);\n        }\n\n        var checkTop = function(index, zeroes) {\n            if (zeroes.has(index)) {\n                return zeroes;\n            }\n\n            if (isIndexValid(index, squares)) {\n                zeroes.add(index);\n            }\n\n            if (index - delimiter < 0) {\n                return zeroes;\n            }\n           \n            zeroes = checkRight(index + 1, zeroes);\n            zeroes = checkLeft(index - 1, zeroes);\n\n            return checkTop(index - delimiter, zeroes);\n        }\n\n        var checkBottom = function(index, zeroes) {\n            if (zeroes.has(index)) {\n                return zeroes;\n            }\n\n            if (isIndexValid(index, squares)) {\n                zeroes.add(index);\n            }\n\n            if (index + delimiter > squares.length) {\n                return zeroes;\n            }\n\n            zeroes = checkRight(index + 1, zeroes);\n            zeroes = checkLeft(index - 1, zeroes);\n\n            return checkBottom(index + delimiter, zeroes);\n        }\n\n        var delimiter = Math.sqrt(squares.length);\n        var zeroes = new Set(history);\n\n        zeroes = checkLeft(i, zeroes);\n\n        return Array.from(zeroes);\n    }\n\n    containsAllElements = (arr, target) => target.every(v => arr.includes(v));\n\n    isGameWon(squares, history) {\n        let notBombs = squares\n            .map((val, index) => val !== BOMB ? index : undefined)\n            .filter(x => x !== undefined);\n        return this.containsAllElements(history, notBombs);\n    }\n\n    initSquares(excluded, size, complexity=5) {\n        let squares = Array(size).fill(null);\n        let counter = 0;\n        while(counter < complexity) {\n            let index = Math.floor(Math.random() * size);\n            if (index === excluded || squares[index] === BOMB) {\n                continue;\n            }\n            squares[index] = BOMB;\n            counter++;\n        }\n\n        let delimiter = Math.sqrt(size);\n        for(var i = 0; i < delimiter; i++) {\n            for (var j = 0; j < delimiter; j++) {\n                let index = i * delimiter + j;\n                if (squares[index] !== BOMB) {\n                    let counter = 0;\n\n                    if (squares[index - delimiter] === BOMB) {  // up\n                        counter++;\n                    } \n                    if (squares[index + delimiter] === BOMB) {  // down\n                        counter++;\n                    } \n                    \n                    // check left for edge cases \n                    if (index % delimiter !== 0) {\n                        if (squares[index - 1] === BOMB) {  // left\n                            counter++;\n                        }\n                        if (squares[index - (delimiter + 1)] === BOMB) {  // up + left\n                            counter++;\n                        }\n                        if (squares[index + (delimiter - 1)] === BOMB) {  // up + left\n                            counter++;\n                        }\n                    }\n\n                    // check right for edge cases\n                    if ((index + 1) % delimiter !== 0) {\n                        if (squares[index + 1] === BOMB) {  // right\n                            counter++;\n                        }\n                        if (squares[index - (delimiter - 1)] === BOMB) {  // up + right\n                            counter++;\n                        }\n                        if (squares[index + (delimiter + 1)] === BOMB) {  // up + right\n                            counter++;\n                        }\n                    }\n\n                    squares[index] = counter;\n                }\n            }\n        }\n\n        return squares;\n    }\n\n    restartGame() {\n        this.setState({\n            squares: [],\n            history: [],\n            flags: [],\n            status: null,\n            failSquare: null,\n        });\n    }\n\n    changeSize(size) {\n        this.setState({\n            size: size,\n        });\n        this.restartGame();\n    }\n\n    handleAddFlag(i) {\n        let { flags } = this.state;\n        if (!flags.includes(i)) {\n            this.setState({\n                flags: flags.concat(i)\n            });\n        } else {\n            this.setState({\n                flags: flags.filter((val, index, arr) => val !== i)\n            })\n        }\n    }\n\n    render() {\n\n        const { status, squares, history, flags, size, complexity, failSquare} = this.state;\n        const gameStatus = STATUSES[status];\n\n        return (\n            <div>\n                <h1 className='status'>{gameStatus}</h1>\n                <Board \n                    squares={squares}\n                    history={history}\n                    flags={flags}\n                    failSquare={failSquare}\n                    status={status}\n                    onClick={i => this.handleClick(i)}\n                    size={size}\n                    addFlag={i => this.handleAddFlag(i)}\n                />\n                <button \n                    className=\"btn\" \n                    onClick={() => this.restartGame()}>Restart\n                </button>\n\n                <p>Choose complexity:</p>\n                <Slider\n                    value={complexity}\n                    publicValue={complexity}\n                    min={1}\n                    max={99}\n                    handleSlider={(i) => this.setState({complexity: i})}\n                />\n\n                <p>Choose board size:</p>\n                <Slider\n                    value={Math.sqrt(size)}\n                    min={2}\n                    max={25}\n                    step={1}\n                    handleSlider={(val) => this.changeSize(val * val)}\n                    publicValue={size}\n                />\n                \n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}